
1) Как управлять гигабайтами?
- Можно исходить из размера обьекта - маленький и большой
- Можно исходить из времени жизни - короткоживущие долгоживущие?

2 стратегии
- Compact - сжатие кучи
Уменьшает фрагментацию
- Sweep - перенос освободившихся участков (копирование дорого) может приводить к фрагментации

При большом размере compact неудобен
При маленьком размере удобен compact неудобен sweep

soh - < 85000
loh - >= 85000

soh - 0,1,2 поколения.

0 поколение - это время между созданием и ближайшим срабатыванием GC.
1 поколение - если объект случайно вылетел за первый GC.
2 поколение - для долго живущих и вечноживущих обьектов.

В soh маленькие обьекты можно легко заполнить пустоты
В loh только sweep

Внутренняя фрагментация:
- Происходит, когда выделенные блоки памяти имеют фиксированный размер, и выделяется больше памяти, чем фактически требуется.
В массиве с фиксированными блоками размером 8 байт, если объект требует 5 байт, оставшиеся 3 байта в блоке будут потеряны.

Внешняя фрагментация:
- Происходит, когда между занятыми блоками остаются небольшие свободные участки памяти.
- Эти свободные участки могут быть недостаточно большими для удовлетворения новых запросов на выделение памяти, даже если общий объем свободной памяти достаточен.

Root - объекты через которые можно дойти до всех обьектов
обходя граф.

Ссылки бывают:
- внутри одного поколения
- older to yonger
если собираем более старшие то и младшие тоже сразу собираем

сard table
0 0 0 0 0 0 0 0 - bits
бит отвечает за определенный диапазон памяти, и если он выставлен в 1
значит в этом диапазоне памяти, есть ссылка на младшее поколение.

сards bundle table 
двухуровневая карта.

- younger to older



2) Выделение памяти

с точки зрения процессора, память выглядит сложнее.
она разделена на слои.

каждый процесс изолирован, есть он и winapi и больше нет никого.
на архитектуре intel сделана виртуализация памяти.
page frames.

у любого процесса есть диапазон памяти.
для программы он создает кусок где есть только она, 
кусок поделен на страницы 4 кб.
каждый кусочек, означает что память в этом месте существует либо не существует.

Если программа решила, что ей нужен heap - 
много сразу брать не будет, я зарезервириую участок памяти, 
а дальше часть этой памяти сделаю commit. 

reserved - нет памяти, чтобы другой посередине ничего не выделил.
unmanaged код, может тоже выделять память.

commited - закомичена, может быть на ram либо на ssd/hdd.

var x = new A();

allocationcontext - начало свободного места
передвигаем адрес начала свободного места.
контекст может закончится - может выделить от 1 до 8 кбайт.

несколько потоков могут запрашивать выделение памяти.
потокобезопасным = медленным.

на каждый поток свой allocationcontext - выделял в своем месте.
соот-во не стоит делать много потоков - будет жирный heap 0 поколения.

Выделение памяти по спискам свободных участков.
после Sweep-а появляются свободные участки.
- best-fit среди всех выбирается тот такого же размера, либо минимально больше того что требуется.
долго, минимально влияет на фрагментацию.
- first-fit - выбираем первый подходящий;
быстро, может сильно фрагментировать память.

Используется смесь обоих подходов.
Buckets - first fit, выбираем первый который подходит
и по односвязному списку идет по best-fit.

Gen0, Gen1 - 0 бакетов, нет такого что при sweep образуется прямо куча свободных участков.
Gen2 - 12, тут может образовываться места свободных участков.
LOH - 7, тут может образовываться места свободных участков.

3) Small object heap

если памяти не хватает, то будет вызываться GC, иногда даже несколько раз.

3) Large object heap
ищем участок памяти в списке свободных участков,
или пытаемся подкоммитить.
если ничего не получилось, запускаем GC. 


4) Heap balances

в Server GC - у каждого ядра есть пара heap (soh, loh)
какое-то ядро может нарушить баланс и аллоцирует слишком много памяти.

у каждого ядра есть кэш, когда приложение обрабатывает участок памяти, весь участок там находится.

лучше выделить сразу больше памяти, в итерациях цикла, чтобы не фрагментировать память,
чтобы отработал Sweep.

5) Режимы работы

Workstation - уменьшить время простоя, GC срабатывает реже.
Server mode - GC срабатывает чаще, растет использование памяти, реже чистится.

Concurrent - во время работы
NotConcurrent - стопит все потоки и сжимаем кучу и тп .

- маркирует обьекты для целевых поколений
- выбирает между техниками сборки мусора (Sweep, Compact)
- Sweep все недостижимые объекты трактуются как свободное место.
Все достижимые становятся 1 поколением путем сдвига границы.
- Compact - все достижимые объекты уплотняются, занимая места недостижимых объектов.

- что-то запускает сборку мусора
- все управляемые потоки встают на паузу (для non concurrent gc)
- поток который вызвал GC запускает процедуру
- выбираем поколение, на основе различных условий
- маркировка, пометка всех достижимых объектов, и всех более молодых поколений
идем в карточный стол, ищем там ненулевые значения, трактуем их как корни.
- планирование, хватит ли просто sweeping, или же нужен compacting.
и много вычислений для дальнейшей работы.


Причины вызова GC
- исчерпали место в SOH

6) Фаза маркировки

Корни GC
- локальные переменные 
string path

есть только 1 ссылка
может жить долго
не должно быть собрано GC
в стеке потока и в регистрах

скоуп переменных
eager root collection 

- Finalization Roots
- Card table
- GC Handle roots

7) Фаза планирования

soh
1) используя информацию о размерах объектов
идем друг за другом и собираем группы
plugs - доступные
gaps - пропуски

2) размер и положение каждого пропуска может быть сохранен
3) для каждого заполненного блока может быть сохранено его положение
и финальное смещение
4) allocator вычисляет все смещения, исполняя виртуальное сжатие кучи
5) gc хранит в последних байтах  

строится bst
brick table - ячейка brick table это ссылка на корень дерева двоичного поиска, которая описывает plug/gap внутри диапазона памяти.

demotion, promotion - из-за Pinned объектов.


