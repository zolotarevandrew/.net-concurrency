Темы:
- JIT (Just-In-Time) компиляция, этапы работы
- IL Code и его структура
- Assemblies, модули, манифесты
- Base Class Library (BCL): обзор основных библиотек

Вопросы:
1) Что такое JIT-компиляция, и какие существуют ее виды?
JIT (Just-In-Time) компиляция — это процесс, при котором промежуточный код (IL — Intermediate Language) компилируется в машинный код непосредственно перед выполнением. 
Этот подход используется в среде исполнения .NET CLR (Common Language Runtime). 
Он отличается от AOT (Ahead-Of-Time) компиляции, где весь код компилируется в машинный код до запуска приложения.

- Компиляция исходного кода: Исходный код (например, на C#) компилируется в IL и сохраняется в сборке (.dll или .exe файл). 
В сборке также содержатся-  метаданные, которые описывают типы, их свойства, методы и зависимости.
- Запуск программы: Когда приложение запускается, CLR начинает загрузку сборки.
- JIT-компиляция метода: Когда метод вызывается впервые, CLR передает его IL-код JIT-компилятору. 
JIT компилирует IL-код в машинный код, оптимизированный под текущую платформу (процессор, операционную систему), и сохраняет скомпилированный машинный код в память.
- Повторное использование: Если метод вызывается повторно, уже скомпилированный машинный код используется из памяти, и метод не компилируется заново.

Normal JIT (Обычная JIT-компиляция) - Каждый метод компилируется только при первом вызове.
Pre-JIT (Ngen — Native Image Generator) - IL-код компилируется в машинный код заранее (до запуска приложения). Используется инструмент ngen.exe, чтобы создать "родные" образы для конкретной платформы.
Tiered JIT (Многоуровневая JIT-компиляция) - На первом этапе используется быстрая и минимальная компиляция для быстрого запуска приложения.
На последующих этапах выполняются более агрессивные оптимизации для горячих (часто вызываемых) методов.


2) Как работает процесс компиляции в .NET, начиная с исходного кода и заканчивая выполнением?

- Исходный код компилируется в промежуточный язык (Intermediate Language, IL) с помощью компилятора (например, csc для C#). На этом этапе:
Генерируется .dll или .exe файл.
Код в IL является платформ независимым и используется для межязыковой совместимости.
IL компилируется вместе с метаданными (например, описания типов, методов, атрибутов и пр.), которые используются средой выполнения.

- Скомпилированный код (IL) сохраняется в Portable Executable (PE) файле, который включает:
IL-код.
Метаданные о типах и структурах.
Манифест сборки, описывающий зависимости, версии и культуру.

- .NET Common Language Runtime (CLR) выполняет несколько задач:
Загружает сборку (используя загрузчик сборок).
Проверяет цифровую подпись и версии зависимостей.
Подготавливает окружение для выполнения.

- Just-In-Time (JIT) компиляция
Для выполнения какого либо метода его код должен быть преобразовано в машинный код.
CLR находит все типы данных, на которые ссылается программный код метода Main.
Выделяет внутренние структуры данных, используемые для управления доступа к типам, на которые есть ссылки.
Каждая запись содержит адрес, по которому можно найти реализацию метода.
- в метаданных сборки, реализующей тип Console найти вызываемый метод WriteLine;
- Извлечь из метаданных IL код метода;
- Выделить блок памяти;
- Откомпилировать IL код в команды машинного языка, сохранив в блоке памяти выше;
- Изменить точку входа метода в таблице типа так, чтобы она указывала на блок памяти выделенный выше;
- Передать управление машинному коду;

При выполнении программы CLR использует JIT-компилятор, чтобы преобразовать IL в машинный код.

- После JIT-компиляции машинный код исполняется непосредственно процессором. CLR продолжает управлять:
Управляемой памятью (Garbage Collection).
Обработкой исключений.
Обеспечением безопасности (Code Access Security).
Поддержкой многопоточности.

3) Что такое Assembly в .NET, и какие типы Assembly существуют?

Assembly в .NET — это основная единица развертывания, версии и безопасности в приложении .NET. 
Это скомпилированный код, который CLR (Common Language Runtime) может исполнять. 
Наименьшая единица многократного использования, безопасности и управления версиями. Может
состоять из одного или нескольких файлов.
Каждая сборка представляет собой либо EXE либо DLL, содержащий набор типов для использования в исполняемом
приложении.



Assembly содержит типы, ресурсы и метаданные, необходимые для выполнения приложения. 
По сути, это пакет, который включает:
- Манифест Assembly: Метаданные, описывающие версию, культуру, зависимости и другие свойства Assembly.
- MSIL-код (Microsoft Intermediate Language): Код, который компилируется в машинный код JIT-компилятором.
- Метаданные: Информация о типах, методах, свойствах и других конструкциях.
Набор таблиц данных, описывающих то что в модуле определено (типы и их члены).
Также есть таблицы, на что ссылается управляемый модуль, на импортируемые типы и их члены.
- Ресурсы: Неисполняемые данные, такие как изображения или локализованные строки.

Private Assembly - Используется только одним приложением.
Shared Assembly - Может использоваться несколькими приложениями. Должна быть подписана с помощью Strong Name (сильное имя) для обеспечения уникальности. Хранится в Global Assembly Cache (GAC) — специальном хранилище для общих сборок.
Satellite Assembly - Позволяет отделить ресурсы от основной сборки для поддержки многоязычных приложений.
Dynamic Assembly - Обычно используется для генерации кода на лету (например, в сценариях компиляции или для создания прокси-классов).


GAC (Global Assembly Cache) — это глобальное хранилище сборок в .NET, предназначенное для общих (shared) сборок. 
Он позволяет разным приложениям использовать одну и ту же сборку без необходимости включать её в директорию каждого приложения.

4) Какова роль Base Class Library (BCL)?

BCL — это ядро .NET Framework, предоставляющее набор универсальных классов и интерфейсов, которые упрощают разработку приложений, 
делают их мощными и масштабируемыми, а также сокращают время на реализацию типовых задач. 
Без BCL разработка на платформе .NET была бы гораздо сложнее и менее продуктивной.

CoreFX - в последних версиях.

5) Чем отличается IL-код от машинного кода, и как происходит их преобразование?

